
config = {{ router.model.model_name }}Config()

@router.get("/", summary="Get {{ router.name.replace('_', ' ') }} data")
async def get_{{ router.name }}_data(
    request: Request,
    response: Response,
    db: Session = Depends(get_db),
    # Standard parameters
    {% for param in router.param_configs.standard %}
    {{ param.name }}: {{ param.type }} = Query({{ param.default }}, {{ param.constraints }}, description="{{ param.description }}"),
    {% endfor %}

    # Filter parameters
    {% for param in router.param_configs.filters %}
    {{ param.name }}: {{ param.type }} = Query(None, description="{{ param.description }}"),
    {% endfor %}

    # Option parameters  
    {% for param in router.param_configs.options %}
    {{ param.name }}: {{ param.type }} = Query(None, description="{{ param.description }}"),
    {% endfor %}
    {% if router.model.foreign_keys %}
    {% endif %}
):
    """Get {{ router.name.replace('_', ' ') }} data with advanced filtering and pagination.

    ## Filtering
    - Use comma-separated values for multiple selections (e.g., element_code=102,489)
    - Use _min/_max suffixes for range queries on numeric fields
    - Use _exact suffix for exact string matches

    ## Pagination
    - Use limit and offset parameters
    - Check pagination metadata in response headers

    ## Sorting
    - Use format: field:direction (e.g., 'year:desc')
    - Multiple sorts: 'year:desc,value:asc'
    """

    router_handler = DatasetRouterHandler(
        db=db, 
        model={{ router.model.model_name }}, 
        model_name="{{ router.model.model_name }}",
        table_name="{{ router.model.table_name }}",
        request=request, 
        response=response, 
        config=config
    )

    {% for param in router.param_configs.filters %}
    {{ param.name }} = router_handler.clean_param({{ param.name }}, "{{ param.filter_type.value }}")
    {% endfor %}

    param_configs = {
        {% for param in router.param_configs.all_params() %}
        "{{ param.name }}": {{ param.name }},
        {% endfor %}
    }
    # Validate field and sort parameter
    requested_fields, sort_columns = router_handler.validate_fields_and_sort_parameters(fields, sort)

    router_handler.validate_filter_parameters(param_configs, db)

    filter_count = router_handler.apply_filters_from_config(param_configs)
    total_count = router_handler.query_builder.get_count(db)

    if sort_columns:
        router_handler.query_builder.add_ordering(sort_columns)
    else:
        router_handler.query_builder.add_ordering(router_handler.get_default_sort())

    # Apply pagination and execute
    results = router_handler.query_builder.paginate(limit, offset).execute(db)

    response_data = router_handler.filter_response_data(results, requested_fields)

    return router_handler.build_response(
        request=request,
        response=response,
        data=response_data,
        total_count=total_count,
        filter_count=filter_count,
        {% for param in router.param_configs.all_params() %}
        {{ param.name }}={{ param.name }},
        {% endfor %}
    )


# templates/partials/router_aggregation_endpoints.jinja2
@router.get("/aggregate", summary="Get aggregated {{ router.name.replace('_', ' ') }} data")
async def get_{{ router.name }}_aggregated(
    request: Request,
    response: Response,
    db: Session = Depends(get_db),
    # Grouping
    group_by: List[str] = Query(..., description="Comma-separated list of fields to group by"),
    # Aggregations
    aggregations: List[str] = Query(..., description="Comma-separated aggregations (e.g., 'value:sum,value:avg:avg_value')"),
    # Standard parameters
    {% for param in router.param_configs.standard %}
    {{ param.name }}: {{ param.type }} = Query({{ param.default }}, {{ param.constraints }}, description="{{ param.description }}"),
    {% endfor %}
    # Filter parameters
    {% for param in router.param_configs.filters %}
    {{ param.name }}: {{ param.type }} = Query(None, description="{{ param.description }}"),
    {% endfor %}
    # Option parameters  
    {% for param in router.param_configs.options %}
    {% if param.name != 'fields' %}
    {{ param.name }}: {{ param.type }} = Query(None, description="{{ param.description }}"),
    {% endif %}
    {% endfor %}
):
    """Get aggregated data with grouping and multiple aggregation functions.
    
    ## Examples
    - Sum by year: `group_by=year&aggregations=value:sum`
    - Average by area and year: `group_by=area_code,year&aggregations=value:avg`
    - Multiple aggregations: `aggregations=value:sum:total_value,value:avg:average_value`
 

    ## Aggregation Functions
    - sum, avg, min, max, count, count_distinct, stddev, variance, median, string_agg, count_if, sum_if
    """
    
    # ------------------------------------------------------------------------
    # Needs same validation: 
    # general values, sort and filter param values, 
    # fk specific validation (checking against actual reference table data)
    # ------------------------------------------------------------------------
    router_handler = RouterHandler(
        db=db, 
        model={{ router.model.model_name }}, 
        model_name="{{ router.model.model_name }}",
        table_name="{{ router.model.table_name }}",
        request=request, 
        response=response, 
        config=config
    )

     # Setup aggregation mode
    router_handler.setup_aggregation(group_by, aggregations)

    # Clean parameters
    {% for param in router.param_configs.filters %}
    {{ param.name }} = router_handler.clean_param({{ param.name }}, "{{ param.filter_type.value }}")
    {% endfor %}

    param_configs = {
        {% for param in router.param_configs.all_params() %}
        {% if param.name != 'fields' %}
        "{{ param.name }}": {{ param.name }},
        {% endif %}
        {% endfor %}
    }

    # Validate fields and sort for aggregation
    if router_handler.is_aggregation:
        # For aggregations, available fields are group_by fields + aggregation aliases
        router_handler.all_data_fields = set(router_handler.get_aggregation_response_fields())
    
    requested_fields, sort_columns = router_handler.validate_fields_and_sort_parameters(fields=[], sort=sort)

    # Validate filter parameters
    router_handler.validate_filter_parameters(param_configs, db)

    # Apply filters
    filter_count = router_handler.apply_filters_from_config(param_configs)
    
    # Add grouping to query
    {# group_columns = [getattr({{ router.model.model_name }}, f) for f in router_handler.group_fields] #}
    group_columns = []
    for field in router_handler.group_fields:
        if field in router_handler.query_builder._field_to_column:
            group_columns.append(router_handler.query_builder._field_to_column[field])
        else:
            raise invalid_parameter(
                    params="group_by",
                    value=f"{group_by}",
                    reason=f"Cannot group by '{field}' - field not available. Available fields: {router_handler.query_builder._field_to_column.keys()}",
                )

    router_handler.query_builder.add_grouping(group_columns)
    
    # Add aggregations to query
    for agg_config in router_handler.agg_configs:
        if agg_config['field'] in router_handler.query_builder._field_to_column:
            column = router_handler.query_builder._field_to_column[agg_config['field']]
        else:
            raise invalid_parameter(
                    params="group_by",
                    value=f"{group_by}",
                    reason=f"Cannot aggregate '{agg_config['field']}' - field not available. Available fields: {router_handler.query_builder._field_to_column.keys()}",
                )
            raise HTTPException(400, f"Cannot aggregate '{agg_config['field']}' - field not available")
        
        agg_type = AggregationType(agg_config['function'])
        router_handler.query_builder.add_aggregation(column, agg_type, agg_config['alias'], agg_config['round_to'])
    
    # Apply aggregations
    router_handler.query_builder.apply_aggregations()
    
    # Get count
    total_count = router_handler.query_builder.get_count(db)

    # Apply sorting
    if sort_columns:
        router_handler.query_builder.add_ordering(sort_columns)
    else:
        # Default sort for aggregations could be first group field
        if router_handler.group_fields:
            router_handler.query_builder.add_ordering([(router_handler.group_fields[0], "asc")])

    # Execute query
    results = router_handler.query_builder.paginate(limit, offset).execute(db)

    # Format aggregation results
    response_data = router_handler.format_aggregation_results(results)

    print(f"SQL Query: {router_handler.query_builder.query}")

    # Build response
    return router_handler.build_response(
        request=request,
        response=response,
        data=response_data,
        total_count=total_count,
        filter_count=filter_count,
        {% for param in router.param_configs.all_params() %}
        {% if param.name != 'fields' %}
        {{ param.name }}={{ param.name }},
        {% endif %}
        {% endfor %}
    )

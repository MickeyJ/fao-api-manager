# yaml_migrator.py.jinja2
# Generated migrator for {{ migration_type }} {{ pipeline_name }}
import json
from pathlib import Path
from sqlalchemy import text
from {{ project_name }}.db.graph_migration_base import GraphMigrationBase
from {{ project_name }}.utils import load_sql
from {{ project_name }}.logger import logger


class {{ migration_class_name }}(GraphMigrationBase):
    """Migrator for {{ description }}"""
    
    def __init__(self):
        super().__init__(
            "{{ table_name }}", 
            "{{ migration_type }}", 
            "{{ project_name }}", 
            "{{ node_label }}", 
            {% if migration_type == 'relationship' %}
            "{{ relationship_type }}",
            {{ batch_size }},
            {% endif %}
        )
    
    def get_migration_query(self) -> str:
        return load_sql("{{ migration_query_filename }}", Path(__file__).parent)
    
    def get_verification_query(self) -> str:
        return load_sql("{{ verify_query_filename }}", Path(__file__).parent)

    {% if index_query_filename %}
    def get_index_queries(self) -> str:
        return load_sql("{{ index_query_filename }}", Path(__file__).parent)
    {% endif %}
    {# spacer #}
    {% if migration_type == 'relationship' %}
    def get_total_rows_query(self) -> str:
        """Count records matching our filters"""
        return load_sql("{{ total_rows_query_filename }}", Path(__file__).parent)
    
    def create(self, records, session):
        """Create relationships in AGE"""
        logger.warning(f"create() called with {len(records)} records")

        for record in records:
            # Get source and target ids
            source_id = getattr(record, "{{ relationship.source_fk }}")
            target_id = getattr(record, "{{ relationship.target_fk }}")

            # Log every 500 records
            if self.created % 500 == 0:
                logger.info(f"{{table_name}} - ({{ relationship.source_fk }}: {source_id})-[:{{ relationship_type }}]->({{ relationship.target_fk }}: {target_id})")
            
            # Build relationship properties string
            props_parts = []
            
            {% for column_name, column in relationship.include_properties.items() %}
                {# join table columns/values #}

                {% if column.is_foreign_key %}
            # Join Table Code Column
            if hasattr(record, "{{ column.sql_column_name }}") and getattr(record, "{{ column.sql_column_name }}") is not None:
                value = getattr(record, "{{ column.sql_column_name }}")
                if isinstance(value, str):
                    value = value.replace("'", "\\'")
                    props_parts.append(f"{{ column.sql_column_name }}: '{value}'")
                else:
                    props_parts.append(f"{{ column.sql_column_name }}: {value}")

            # Join Table Description Column
            {% set description_column = column.column_as or column.reference_description_column %}
            if hasattr(record, "{{ description_column }}") and getattr(record, "{{ description_column }}") is not None:
                value = getattr(record, "{{ description_column }}")
                if isinstance(value, str):
                    value = value.replace("'", "\\'")
                    props_parts.append(f"{{ description_column }}: '{value}'")
                else:
                    props_parts.append(f"{{ description_column }}: {value}")
                {# dataset table columns/values #}
                {% else %}
            # Dataset Table Column
            if hasattr(record, "{{ column.sql_column_name }}") and getattr(record, "{{ column.sql_column_name }}") is not None:
                value = getattr(record, "{{ column.sql_column_name }}")
                if isinstance(value, str):
                    value = value.replace("'", "\\'")
                    props_parts.append(f"{{ column.sql_column_name }}: '{value}'")
                else:
                    props_parts.append(f"{{ column.sql_column_name }}: {value}")
                {% endif %}
            {% endfor %}
            
            props_parts.append("source_dataset: '{{ table_name }}'")
            props_str = ", ".join(props_parts)
            
            # Build query without parameters
            query = text(f"""
                SELECT * FROM cypher('{{ project_name }}', $$
                    MATCH (source:{{ relationship.source_label }} """ + "{" + f"id: {source_id}, source_dataset: '{{ table_name }}'" + "}" + f""")
                    MATCH (target:{{ relationship.target_label }} """ + "{" + f"id: {target_id}, source_dataset: '{{ table_name }}'" + "}" + f""")
                    CREATE (source)-[r:{{ relationship_type }} """ + "{" + props_str + "}" + f"""]->(target)
                    RETURN r
                $$) AS (result agtype)
            """)
            
            session.execute(query)
            self.created += 1

        logger.warning(f"create() completed, self.created now = {self.created}")
    
    {% else %}

    def create(self, records, session):
        """Create nodes in AGE"""

        logger.info(f"Creating {{node_label}} nodes")

        # session.execute(text("SELECT create_vlabel('{{ project_name }}', '{{node_label}}');"))

        for record in records:
            # Build properties string
            props_parts = []

            # Always include id first
            props_parts.append(f"id: {record.id}")
            
            {% for prop in properties %}
            if hasattr(record, "{{ prop }}") and getattr(record, "{{ prop }}") is not None:
                value = getattr(record, "{{ prop }}")
                
                if isinstance(value, str):
                    # Escape single quotes for Cypher
                    value = value.replace("'", "\\'")
                    props_parts.append(f"{{ prop }}: '{value}'")
                else:
                    props_parts.append(f"{{ prop }}: {value}")
            {% endfor %}
            
            props_str = ", ".join(props_parts)
            
            # Build query without parameters - use string concatenation for braces
            query = text(f"""
                SELECT * FROM cypher('{{ project_name }}', $$
                    CREATE (n:{{ node_label }} """ + "{" + props_str + "}" + f""")
                    RETURN n
                $$) AS (result agtype)
            """)
            
            # Log every 500 records
            if self.created % 500 == 0:
                print("{" + props_str + "}")

            session.execute(query)
            self.created += 1
        
    {% endif %}
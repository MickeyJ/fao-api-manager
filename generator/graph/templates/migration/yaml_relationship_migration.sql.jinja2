-- yaml_relationship_migration.cypher.sql.jinja2
-- Get records to create {{ relationship.type }} relationships from {{ table_name }}
SELECT 
  {% if count_only %}
  COUNT(*)
  {% else %}
  t.*,
    {% for column_name, column in relationship.include_properties.items() %}
      {# select join table code and name columns [ item_codes.item_code, item_codes.item ] #}
      {% if column.is_foreign_key %}
  {{ column.table_name }}.{{ column.sql_column_name }},
  {{ column.table_name }}.{{ column.reference_description_column }}{% if column.column_as %} as {{ column.column_as }}{% endif %}{{ ',' if not loop.last else '' }}
      {% endif %}
    {% endfor %}
  {% endif %}
FROM {{ table_name }} t
  {# join on foreign key columns #}
  {% for column_name, column in relationship.include_properties.items() %}
    {% if column.is_foreign_key %}
  JOIN {{ column.table_name }} ON t.{{ column.hash_fk_sql_column_name }} = {{ column.table_name }}.id
    {% endif %}
  {% endfor %}
WHERE t.{{ relationship.source_fk }} IS NOT NULL
  AND t.{{ relationship.target_fk }} IS NOT NULL
  {% if 'value' in relationship.include_properties %}
  AND t.value > 0
  AND t.value != 'NaN'
  AND t.value IS NOT NULL
  {% endif %}
  {% for filter in relationship.filters %}
    {% if filter['join'] %} 
    {# filter on join table columns (join = true) #}
      {% for column_name, column in relationship.include_properties.items() %}
        {% if filter['field'] == column.sql_column_name %}
          {% if filter['values_in'] %}
  AND {{ column.table_name }}.{{ filter['field'] }} IN ({{ filter['values_in'] | join(', ') }})
          {% elif filter['value'] %}
  AND {{ column.table_name }}.{{ filter['field'] }} = {{ filter['value'] }}
          {% elif filter['min_value'] %}
  AND {{ column.table_name }}.{{ filter['field'] }} >= {{ filter['min_value'] }}
          {% endif %}
        {% endif %}
      {% endfor %}
    {% else %}
    {# filter on datatset table columns (join not set) #}
      {% if filter['values_in'] %}
  AND t.{{ filter['field'] }} IN ({{ filter['values_in'] | join(', ') }})
      {% elif filter['value'] %}
  AND t.{{ filter['field'] }} = {{ filter['value'] }}
      {% elif filter['min_value'] %}
  AND t.{{ filter['field'] }} >= {{ filter['min_value'] }}
      {% endif %}
    {% endif %}
  {% endfor %}
{% if not count_only %}
ORDER BY t.id
LIMIT :limit OFFSET :offset
{% endif %}
